# -*- coding: utf-8 -*-
"""dcf_py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17JOgnkj8u2oW7tHsRXK_BYfRYDWzW0lh
"""

import os
import pathlib
import numpy as np
import pandas as pd
from datetime import datetime

# -------- CONFIG --------
TICKERS = os.getenv("DCF_TICKERS", "AAPL,MSFT,TSLA,AMZN,GOOGL").split(",")
YEARS = int(os.getenv("DCF_YEARS", "5"))
DISCOUNT_RATE = float(os.getenv("DCF_DISCOUNT", "0.08"))
TERMINAL_GROWTH = float(os.getenv("DCF_GROWTH", "0.02"))

VALUATIONS_DIR = pathlib.Path("data/valuations")
REPORTS_DIR = pathlib.Path("reports")
DATA_FILE = pathlib.Path("data/multi_ticker_fcf.csv")
VALUATIONS_DIR.mkdir(parents=True, exist_ok=True)
REPORTS_DIR.mkdir(parents=True, exist_ok=True)

# -------- OFFLINE DATA --------
def load_offline_data(ticker):
    df = pd.read_csv("/content/multi_ticker_fcf.csv")
    df = df[df['Ticker'] == ticker].sort_values('Year')
    df['Free_Cash_Flow'] = df['Operating_Cash_Flow'] - df['CapEx']
    return df

# -------- SAFE GROWTH --------
def safe_growth(series):
    s = pd.Series(series).dropna().astype(float)
    if len(s) < 2 or s.iloc[0] == 0:
        return 0.05
    g = (s.iloc[-1]/s.iloc[0])**(1/(len(s)-1)) - 1
    return float(np.clip(g, -0.05, 0.20))

# -------- DCF CALCULATION --------
def dcf_from_ticker(ticker):
    try:
        import yfinance as yf
        y = yf.Ticker(ticker)
        cf = y.cashflow
        info = y.info if hasattr(y, "info") else {}
        price = y.history(period="1d")["Close"].iloc[-1]
        shares = info.get("sharesOutstanding", np.nan)

        # Pull OCF & CapEx robustly
        def row(name_options):
            for n in name_options:
                if n in cf.index:
                    return cf.loc[n].astype(float)
            return pd.Series(dtype=float)

        ocf = row(["Total Cash From Operating Activities", "Operating Cash Flow"]).dropna()
        capex = row(["Capital Expenditures"]).dropna().reindex(ocf.index).fillna(0.0).abs()
        fcf_hist = (ocf - capex).dropna()
        growth = safe_growth(fcf_hist.values)
        df = pd.DataFrame({"Year": list(range(1, len(fcf_hist)+1)), "FCF": fcf_hist.values})
    except Exception:
        print(f"Using offline data for {ticker}")
        df = load_offline_data(ticker)
        price = np.nan
        shares = df['Shares_Outstanding'].iloc[-1] if 'Shares_Outstanding' in df.columns else np.nan
        growth = safe_growth(df['Free_Cash_Flow'].values)

    # Forecast
    last_fcf = df['Free_Cash_Flow'].iloc[-1] if 'Free_Cash_Flow' in df.columns else df['FCF'].iloc[-1]
    fcf_forecast = [last_fcf * (1 + growth)**i for i in range(1, YEARS+1)]
    pv_fcfs = [cf / ((1 + DISCOUNT_RATE)**t) for t, cf in enumerate(fcf_forecast, start=1)]
    tv = fcf_forecast[-1]*(1 + TERMINAL_GROWTH)/(DISCOUNT_RATE - TERMINAL_GROWTH) if DISCOUNT_RATE > TERMINAL_GROWTH else np.nan
    pv_tv = tv / ((1 + DISCOUNT_RATE)**YEARS) if not np.isnan(tv) else np.nan
    enterprise_value = sum(pv_fcfs) + (pv_tv if not np.isnan(pv_tv) else 0.0)
    intrinsic_per_share = enterprise_value / shares if not np.isnan(shares) and shares > 0 else np.nan

    # Save Excel
    out_xlsx = VALUATIONS_DIR / f"{ticker}_DCF.xlsx"
    with pd.ExcelWriter(out_xlsx, engine="openpyxl") as w:
        pd.DataFrame({"Forecasted FCF": fcf_forecast, "Discounted FCF": pv_fcfs}).to_excel(w, sheet_name="DCF", index=False)
        pd.DataFrame({
            "Metric": ["Ticker","Price","Shares","Growth","Discount Rate","Terminal Growth","Enterprise Value","PV of TV"],
            "Value": [ticker, price, shares, growth, DISCOUNT_RATE, TERMINAL_GROWTH, enterprise_value, pv_tv]
        }).to_excel(w, sheet_name="Summary", index=False)

    # Save HTML report
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    html = f"""<html><head><meta charset='utf-8'><title>{ticker} DCF Valuation</title></head>
    <body>
      <h1>{ticker} DCF Valuation</h1>
      <p><b>Updated:</b> {now}</p>
      <ul>
        <li>Market Price: {price if not np.isnan(price) else 'N/A'}</li>
        <li>Discount Rate: {DISCOUNT_RATE*100:.2f}%</li>
        <li>Terminal Growth: {TERMINAL_GROWTH*100:.2f}%</li>
        <li>FCF Growth (hist-based): {growth*100:.2f}%</li>
      </ul>
      <p><b>Enterprise Value (DCF):</b> {enterprise_value:,.0f}</p>
      <p><b>Intrinsic Value / Share (approx):</b> {intrinsic_per_share if not np.isnan(intrinsic_per_share) else 'N/A'}</p>
      <p><i>Automation note:</i> simplified EV and per-share calculations for consistency across tickers.</p>
      <p>Excel output: <code>data/valuations/{ticker}_DCF.xlsx</code></p>
    </body></html>"""
    (REPORTS_DIR / f"{ticker}_DCF.html").write_text(html, encoding="utf-8")

if __name__ == "__main__":
    for t in [t.strip().upper() for t in TICKERS if t.strip()]:
        try:
            dcf_from_ticker(t)
        except Exception as e:
            print("Failed:", t, e)